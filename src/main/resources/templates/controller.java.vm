package ${package.Controller};

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import ${package.Entity}.${entity};
import ${package.Service}.${table.serviceName};
import ${cfg.pageVo}.PageVo;

import java.time.LocalDateTime;
##判断是否是要引入date包
#foreach($field in ${table.fields})
    #if(${field.propertyType.equals("Date")})
        #set($hasDateType = "hasDateType")
    #else
        #set($hasDateType = "noDateType")
    #end
#end
#if(${hasDateType.equals("hasDateType")})
import java.util.Date;
#end

/**
 * <p>
 * ${table.comment}  前端控制器
 * </p>
 * @author ${author}
 * @since ${date}
 */
@Api(value = "${table.controllerName}", description = "${table.comment}")
@RestController
@RequestMapping(value = "#if(${package.ModuleName})/${package.ModuleName}#end/${table.entityPath}", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end
@Autowired private ${table.serviceName} ${table.entityPath}Service;

##${table.entityPath} 表字段的小写
@RequestMapping(value = "", method = RequestMethod.GET)
@ApiOperation(value = "查询所有${table.comment}", notes = "查询所有${table.comment}")
public Object findAll(PageVo pageVo,
@ApiParam(name = "search", value = "模糊查询字段", required = false) @RequestParam(required = false, defaultValue = "") String search){
        return null;
        }


@RequestMapping(value = "/{id}", method = RequestMethod.GET)
@ApiOperation(value = "查询${table.comment}详情", notes = "查询${table.comment}详情", httpMethod = "GET" )
public ${entity} findById(@ApiParam(name = "id", value = "${table.comment}id", required = true) @PathVariable("id") Integer id){
        return ${table.entityPath}Service.getById(id);
        }

@RequestMapping(value = "/{id}", method = RequestMethod.PUT)
@ApiOperation(value = "修改${table.comment}", notes = "修改${table.comment}")
public void updateById(${entity} ${table.entityPath}){
    ${table.entityPath}Service.saveOrUpdate(${table.entityPath});
        }

@RequestMapping(value = "", method = RequestMethod.POST)
@ApiOperation(value = "添加${table.comment}", notes = "添加${table.comment}")
public void save(
#foreach($field in ${table.fields})
    #set($lastField= ${field.propertyName})
#end

#foreach($field in ${table.fields})
    #if( ${field.propertyName.equals("id")})
    #else @ApiParam(name = "${field.propertyName}", value = "${field.comment}")
    @RequestParam(required = false, name = "${field.propertyName}" ) ${field.propertyType} ${field.propertyName}
        #if(${lastField} != ${field.propertyName})
                ,
        #end
    #end
#end
        ){
${entity} ${table.entityPath} =new ${entity}(
#foreach($field in ${table.fields})
    #set($lastField= ${field.propertyName})
#end

#foreach($field in ${table.fields})
    #if( ${field.propertyName.equals("id")})#else${field.propertyName}#if(${lastField} != ${field.propertyName}),#end#end
#end
        );
${table.entityPath}Service.save(${table.entityPath});
        }

@RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
@ApiOperation(value = "删除${table.comment}", notes = "修改${table.comment}")
public void deleteById(@ApiParam(name = "id", value = "${table.comment}id", required = true) @PathVariable("id") Integer id){
    ${table.entityPath}Service.removeById(id);
        }

        }
